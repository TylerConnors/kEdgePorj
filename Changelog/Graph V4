
/*************************************************************************
 *  Compilation:  javac Graph.java        
 *  Execution:    java Graph input.txt
 *  Dependencies: Bag.java In.java StdOut.java
 *  Data files:   http://algs4.cs.princeton.edu/41undirected/tinyG.txt
 *
 *  A graph, implemented using an array of sets.
 *  Parallel edges and self-loops allowed.
 *
 *  % java Graph tinyG.txt
 *  13 vertices, 13 edges 
 *  0: 6 2 1 5 
 *  1: 0 
 *  2: 0 
 *  3: 5 4 
 *  4: 5 6 3 
 *  5: 3 4 0 
 *  6: 0 4 
 *  7: 8 
 *  8: 7 
 *  9: 11 10 12 
 *  10: 9 
 *  11: 9 12 
 *  12: 11 9 
 *
 *  % java Graph mediumG.txt
 *  250 vertices, 1273 edges 
 *  0: 225 222 211 209 204 202 191 176 163 160 149 114 97 80 68 59 58 49 44 24 15 
 *  1: 220 203 200 194 189 164 150 130 107 72 
 *  2: 141 110 108 86 79 51 42 18 14 
 *  ...
 *  
 *************************************************************************/


/**
 *  The <tt>Graph</tt> class represents an undirected graph of vertices
 *  named 0 through <em>V</em> - 1.
 *  It supports the following two primary operations: add an edge to the graph,
 *  iterate over all of the vertices adjacent to a vertex. It also provides
 *  methods for returning the number of vertices <em>V</em> and the number
 *  of edges <em>E</em>. Parallel edges and self-loops are permitted.
 *  <p>
 *  This implementation uses an adjacency-lists representation, which 
 *  is a vertex-indexed array of {@link Bag} objects.
 *  All operations take constant time (in the worst case) except
 *  iterating over the vertices adjacent to a given vertex, which takes
 *  time proportional to the number of such vertices.
 *  <p>
 *  For additional documentation, see <a href="http://algs4.cs.princeton.edu/41undirected">Section 4.1</a> of
 *  <i>Algorithms, 4th Edition</i> by Robert Sedgewick and Kevin Wayne.
 *
 *  @author Robert Sedgewick
 *  @author Kevin Wayne
 */
public class Graph {
	private final int V;
	private int E;
	private Node[] nodes;
	private java.util.LinkedList<Edge> edges;
	/*
	to use, it's just like a linked list.
	just use linkedListArray[i] to get the linked list of that vertex
	 */

	private static class Node
	{
		private java.util.LinkedList<Edge> adj;
	}
	
	private static class Edge
	{
		private int color = 0; 
		private Node V;	//vertex 1
		private Node W; //vertex 2
		private int number; //identifier
	}
	/**
	 * Initializes an empty graph with <tt>V</tt> vertices and 0 edges.
	 * param V the number of vertices
	 * @throws java.lang.IllegalArgumentException if <tt>V</tt> < 0
	 */	

	public Graph(int v) {
		if (v < 0) throw new IllegalArgumentException("Number of vertices must be nonnegative");
		this.V = v;
		this.E = 0;
		nodes = new Node[v];
		for (int i = 0; i < V; i++) 
		{
			nodes[i].adj = new java.util.LinkedList<Edge>();
		}
		edges = new java.util.LinkedList<Edge>();
	}
	
	/**
	 * Returns the number of vertices in the graph.
	 * @return the number of vertices in the graph
	 */
	public int V() {
		return V;
	}

	/**
	 * Returns the number of edges in the graph.
	 * @return the number of edges in the graph
	 */
	public int E() {
		return E;
	}


	// throw an IndexOutOfBoundsException unless 0 <= v < V
	private void validateVertex(int v) {
		if (v < 0 || v >= V)
			throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
	}

	/**
	 * Adds the undirected edge v-w to the graph.
	 * @param v one vertex in the edge
	 * @param w the other vertex in the edge
	 * @throws java.lang.IndexOutOfBoundsException unless both 0 <= v < V and 0 <= w < V
	 */
	public void addEdge(int v, int w) 
	{
		validateVertex(v);
		validateVertex(w);
		E++;		//increase total number of edges
		
		Edge edge = new Edge();				//create edge
		edge.V =nodes[v];
		edge.W =nodes[w];
		edge.color = 0;	
		edge.number = E;
		
		edges.add(edge);		//add edge to global list
		nodes[v].adj.add(edge);	//add edge to nodes
		nodes[w].adj.add(edge);
	}
	
	
	//this changes the color of an edge(color represented by number)
	//edges each have their own number
	public void changeColor(int num,int edgeColor) 
	{
		for (int i = 0; i < edges.size(); i++) 
		{
			if(edges.get(i).number == num)
			{
				edges.get(i).color = edgeColor;
				break;
			}
		}
	}


	/**
	 * Returns the vertices adjacent to vertex <tt>v</tt>.
	 * @return the vertices adjacent to vertex <tt>v</tt> as an Iterable
	 * @param v the vertex
	 * @throws java.lang.IndexOutOfBoundsException unless 0 <= v < V
	 */
	public Iterable<Edge> adj(int v) {
		validateVertex(v);
		return nodes[v].adj;
	}
	

	/**
	 * Returns the degree of vertex <tt>v</tt>.
	 * @return the degree of vertex <tt>v</tt>
	 * @param v the vertex
	 * @throws java.lang.IndexOutOfBoundsException unless 0 <= v < V
	 */
	public int degree(int v) {
		validateVertex(v);
		return nodes[v].adj.size();
	}

	
}
