import java.util.Iterator;

/**
 *  @author Tyler Connors
 */
public class Graph 
{
	private final int V;
	private final int E;
	private Node[] nodes;
	private Edge[] edges;

	private static class Node
	{
		private java.util.LinkedList<Edge> adj;

		public boolean hasColor(int d) {
			Iterator<Edge> it = this.adj.iterator();
			while(it.hasNext()){
				if(it.next().color==d){
					return true;
				}
			}
			return false;
		}
	}

	private static class Edge
	{
		private int color = 0; 
		private Node V;	//vertex 1
		private Node W ; //vertex 2
	}


	public Graph(int v,int numEdge) 
	{
		if (v < 0) throw new IllegalArgumentException("Number of vertices must be nonnegative");
		this.V = v;
		this.E = numEdge;
		nodes = new Node[v];
		for (int i = 0; i < V; i++) 
		{
			nodes[i] = new Node();
			nodes[i].adj = new java.util.LinkedList<Edge>();
		}
		edges = new Edge[numEdge];
		for (int i = 0; i < E; i++) 
		{
			edges[i] = new Edge();
		}

	}

	/**
	 * Returns the number of vertices in the graph.
	 * @return the number of vertices in the graph
	 */
	public int V() {
		return V;
	}

	/**
	 * Returns the number of edges in the graph.
	 * @return the number of edges in the graph
	 */
	public int E() {
		return E;
	}


	// throw an IndexOutOfBoundsException unless 0 <= v < V
	private void validateVertex(int v) {
		if (v < 0 || v >= V)
			throw new IndexOutOfBoundsException("vertex " + v + " is not between 0 and " + (V-1));
	}

	private boolean validateEdge(int v, int w)	//returns true if the edge does NOT exist in edges[]
	{
		for(Edge edge:edges)
		{
			if ((edge.V == nodes[v])&&(edge.W == nodes[w]))
			{
				return false;
			}
		}
		return true;
	}

	public void addEdge(int num, int v, int w)  
	{ 
		validateVertex(v); 
		validateVertex(w); 
		if ((v != w) && (validateEdge(v,w) ==  true))				//allows no self loops or multiple edges
		{
			Edge edge = new Edge();				//create edge 
			edge.V =nodes[v]; 
			edge.W =nodes[w]; 
			edge.color = 0;	

			edges[num]=edge;			//adds edges to edge array and node adj lists
			nodes[v].adj.add(edge);
			nodes[w].adj.add(edge);
		}
	} 


	//this changes the color of an edge(color represented by number)
	//edges each have their own number
	public void changeColor(int num,int edgeColor) 
	{
		edges[num].color = edgeColor;
	}

	
	
	public Graph MisraAndGries(Graph graph) {
		Edge[] uncolored = new Edge[graph.E];
		uncolored =	graph.edges;
		for(int i=0;i<uncolored.length;i++){
			Edge edge = uncolored[i]; // Any edge in uncolored will do
			Node[] fan = findFan(edge.V, edge.W); // The fan needs
																// to be a fan
															// of one vertex
																// and its first
																// element is
																// the other
																// vertex
			int c = findFreeColor(edge.V);
			int d = findFreeColor(edge.W);
			invertPath(edge.V, c, d); // Finds a path containing the
												// given vertex and contining
												// nothing but edges of the
												// given colors, then switches
												// the colors
			Node vertex = new Node();
			for (int j = 1; vertex.hasColor(d) && j < fan.length; ++j) {
				vertex = fan[j];
			}
			Node[] secondFan = findFan(vertex); // Find a fan of vertex. We don't
												// care what the first element
												// of the fan is, unlike above,
												// so we don't specify.
			rotate(secondFan);
			edge.color = d ;
		}
		return graph; // Edges are now colored
	}
	

	private void rotate(Node[] secondFan) {
		// TODO Auto-generated method stub
		
	}

	private void invertPath(Node v2, int c, int d) {
		// TODO Auto-generated method stub
		
	}

	private int findFreeColor(Node v2) {
		// TODO Auto-generated method stub
		return 0;
	}

	private Node[] findFan(Node v2, Node w) {
		// TODO Auto-generated method stub
		return null;
	}
	
	private Node[] findFan(Node v) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Returns the vertices adjacent to vertex <tt>v</tt>.
	 * @return the vertices adjacent to vertex <tt>v</tt> as an Iterable
	 * @param v the vertex
	 * @throws java.lang.IndexOutOfBoundsException unless 0 <= v < V
	 */
	public Iterable<Edge> adj(int v) {
		validateVertex(v);
		return nodes[v].adj;
	}


	/**
	 * Returns the degree of vertex <tt>v</tt>.
	 * @return the degree of vertex <tt>v</tt>
	 * @param v the vertex
	 * @throws java.lang.IndexOutOfBoundsException unless 0 <= v < V
	 */
	public int degree(int v) {
		validateVertex(v);
		return nodes[v].adj.size();
	}


}
